name: End-to-End Dotfiles Testing

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: "0 2 * * *"

jobs:
  test-ubuntu:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        profile: [minimal, development, full]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y stow gnupg pass pinentry-tty zsh

      - name: Set up GPG for testing
        run: |
          # Create test GPG key
          cat > gpg-batch <<EOF
          %echo Generating test GPG key
          Key-Type: RSA
          Key-Length: 2048
          Subkey-Type: RSA
          Subkey-Length: 2048
          Name-Real: CI Test User
          Name-Email: ci-test@example.com
          Expire-Date: 1y
          Passphrase: testpassword123
          %commit
          %echo Done
          EOF

          gpg --batch --generate-key gpg-batch

      - name: Initialize pass store
        run: |
          pass init ci-test@example.com
          echo "test-secret" | pass insert -e test/sample

      # Installation testing disabled per user request
      # - name: Test installation with profile
      #   env:
      #     DOTFILES_PROFILE: ${{ matrix.profile }}
      #     INSTALL_MODE: automatic
      #     CI: true
      #   run: |
      #     ./install.sh

      # Verification disabled per user request (no installation to verify)
      # - name: Verify installation
      #   run: |
      #     cd dotfiles
      #     ./scripts/profile-manager.sh status

      # Profile feature testing disabled per user request (no installation to test)
      # - name: Test profile-specific features
      #   run: |
      #     # Test based on profile
      #     case "${{ matrix.profile }}" in
      #       "minimal")
      #         test -f ~/.gitconfig
      #         test -f ~/.zshrc
      #         ;;
      #       "development")
      #         test -f ~/.gitconfig
      #         test -f ~/.zshrc
      #         test -f ~/.npmrc
      #         ;;
      #       "full")
      #         test -f ~/.gitconfig
      #         test -f ~/.zshrc
      #         test -f ~/.vimrc
      #         test -f ~/.npmrc
      #         pass ls
      #         ;;
      #     esac

      # Pass store testing disabled per user request
      # - name: Test pass store functionality
      #   if: matrix.profile == 'full'
      #   run: |
      #     # Test pass operations
      #     pass show test/sample | grep -q "test-secret"
      #     echo "another-secret" | pass insert -e test/another
      #     pass ls | grep -q "test"

  test-macos:
    runs-on: macos-latest
    strategy:
      matrix:
        profile: [minimal, development]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          # Install Homebrew packages
          brew install stow gnupg pass pinentry-mac node

      - name: Set up GPG for testing
        run: |
          # Create test GPG key for macOS
          cat > gpg-batch <<EOF
          %echo Generating test GPG key
          Key-Type: RSA
          Key-Length: 2048
          Name-Real: macOS Test User
          Name-Email: macos-test@example.com
          Expire-Date: 1y
          Passphrase: testpassword123
          %commit
          %echo Done
          EOF

          gpg --batch --generate-key gpg-batch

      - name: Configure GPG agent for macOS
        run: |
          mkdir -p ~/.gnupg
          echo "pinentry-program $(which pinentry-mac)" > ~/.gnupg/gpg-agent.conf
          echo "default-cache-ttl 3600" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent

      - name: Initialize pass store
        run: |
          pass init macos-test@example.com

      # Installation testing disabled per user request
      # - name: Test installation
      #   env:
      #     DOTFILES_PROFILE: ${{ matrix.profile }}
      #     INSTALL_MODE: automatic
      #     CI: true
      #   run: |
      #     ./install.sh

      # macOS verification disabled per user request (no installation to verify)
      # - name: Verify macOS-specific features
      #   run: |
      #     # Test macOS-specific configurations
      #     test -f ~/.gitconfig
      #     test -f ~/.zshrc
      #     
      #     # Test Homebrew integration
      #     command -v brew
      #     
      #     # Test npm packages if development profile
      #     if [ "${{ matrix.profile }}" = "development" ]; then
      #       # Additional npm package tests can be added here
      #     fic configurations
          test -f ~/.gitconfig
          test -f ~/.zshrc

          # Test Homebrew integration
          command -v brew

          # Test npm packages if development profile
          if [ "${{ matrix.profile }}" = "development" ]; then
            # Additional npm package tests can be added here
          fi

  # Docker testing disabled per user request
  # test-docker:
  #   runs-on: ubuntu-latest
  #
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #
  #     - name: Set up Docker Buildx
  #       uses: docker/setup-buildx-action@v3
  #
  #     - name: Run Docker E2E tests
  #       run: |
  #         cd tests/e2e
  #         ./test-runner.sh
  #
  #     - name: Upload test artifacts
  #       if: failure()
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: test-logs
  #         path: |
  #           tests/logs/
  #           ~/.local/share/containers/storage/
  #         retention-days: 7

  test-integration:
    runs-on: ubuntu-latest
    needs: [test-ubuntu]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Testing disabled per user request
      # - name: Run integration tests
      #   run: |
      #     # Run existing ShellSpec tests
      #     shellspec --directory tests --format documentation

      # Coverage generation disabled per user request
      # - name: Generate coverage report
      #   run: |
      #     shellspec --directory tests --format documentation --kcov || echo "Coverage generation completed with warnings"

      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v4
      #   with:
      #     file: tests/coverage/coverage.xml
      #     fail_ci_if_error: false
