#!/bin/bash
# Secure OpenCode Launcher (oc)
# This script loads environment variables from launchctl and launches opencode
# Usage: oc [opencode arguments...]

# Debug mode - uncomment to see what's being loaded
DEBUG_MODE=false

# Load environment variables from system (launchctl)
load_env_var() {
    local var_name="$1"
    local var_value=$(launchctl getenv "$var_name" 2>/dev/null || echo "")
    if [[ -n "$var_value" ]]; then
        export "$var_name"="$var_value"
        [[ "$DEBUG_MODE" == "true" ]] && echo "Loaded $var_name: ${var_value:0:10}..."
    else
        [[ "$DEBUG_MODE" == "true" ]] && echo "Warning: $var_name not found in launchctl"
    fi
}

# Load all API keys from system environment
load_env_var "OLLAMA_API_KEY"
load_env_var "OPENAI_API_KEY" 
load_env_var "ANTHROPIC_API_KEY"
load_env_var "GITHUB_TOKEN"
load_env_var "DEEPSEEK_API_KEY"
load_env_var "GLM_API_KEY"
load_env_var "KIMI_API_KEY"
load_env_var "BRAVE_API_KEY"

# Pre-launch agent transformation
run_pre_launch_transform() {
    local pre_launch_script="$HOME/dotfiles/opencode/.config/opencode/scripts/pre-launch-transform.js"
    
    # Only run transformation for commands that might load agents
    case "${1:-}" in
        "" | "-h" | "--help" | "help" | "version" | "--version")
            # These commands don't load agents, skip transformation
            return 0
            ;;
        *)
            # All other commands might load agents, run transformation
            if [[ -f "$pre_launch_script" ]]; then
                [[ "$DEBUG_MODE" == "true" ]] && echo "Running pre-launch agent transformation..."
                if node "$pre_launch_script" 2>/dev/null; then
                    [[ "$DEBUG_MODE" == "true" ]] && echo "✅ Pre-launch transformation completed"
                else
                    [[ "$DEBUG_MODE" == "true" ]] && echo "⚠️  Pre-launch transformation had issues, proceeding anyway..."
                fi
            else
                [[ "$DEBUG_MODE" == "true" ]] && echo "⚠️  Pre-launch transform script not found, proceeding..."
            fi
            ;;
    esac
}

# Debug: Show final environment before launching
if [[ "$DEBUG_MODE" == "true" ]]; then
    echo "Final environment check:"
    echo "OLLAMA_API_KEY in env: ${OLLAMA_API_KEY:0:10}..."
    echo "Environment passed to opencode:"
    env | grep -E "(OLLAMA|OPENAI|ANTHROPIC|GITHUB|DEEPSEEK)" | sed 's/=.*/=***/'
fi

# Removed auto-wrapper logic to prevent corruption of npm packages
# The oc script handles environment and transformations; npm handles binary management

# Run pre-launch agent transformation
run_pre_launch_transform "$@"

# Launch opencode with environment variables available
# Use the current binary to ensure upgrades work properly
OPENCODE_BINARY="/Users/smian/.npm-global/bin/opencode"
OPENCODE_BACKUP="/Users/smian/.npm-global/bin/opencode.original"

# Try current binary first (this gets updated by npm)
if [[ -x "$OPENCODE_BINARY" ]]; then
    [[ "$DEBUG_MODE" == "true" ]] && echo "Using current opencode binary: $OPENCODE_BINARY"
    exec "$OPENCODE_BINARY" "$@"
# Fallback to backup binary if current one doesn't exist
elif [[ -x "$OPENCODE_BACKUP" ]]; then
    [[ "$DEBUG_MODE" == "true" ]] && echo "Using backup opencode binary: $OPENCODE_BACKUP"
    exec "$OPENCODE_BACKUP" "$@"
else
    echo "Error: opencode binary not found at $OPENCODE_BINARY or $OPENCODE_BACKUP" >&2
    echo "Try running: npm install -g opencode-ai" >&2
    exit 1
fi