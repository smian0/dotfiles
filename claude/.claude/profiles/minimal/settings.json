{
  "includeCoAuthoredBy": false,
  "permissions": {
    "allow": [
      "Bash(npm run lint)",
      "Bash(npm run test:*)",
      "Read(~/.zshrc)",
      "Read(./.env.example)",
      "mcp__serena__read_memory",
      "mcp__serena__write_memory",
      "mcp__serena__list_memories",
      "mcp__serena__delete_memory",
      "mcp__serena__find_file",
      "mcp__serena__read_file",
      "mcp__serena__create_text_file",
      "mcp__serena__list_dir",
      "mcp__serena__replace_regex",
      "mcp__serena__search_for_pattern",
      "mcp__serena__get_symbols_overview",
      "mcp__serena__find_symbol",
      "mcp__serena__find_referencing_symbols",
      "mcp__serena__replace_symbol_body",
      "mcp__serena__insert_after_symbol",
      "mcp__serena__insert_before_symbol",
      "mcp__serena__execute_shell_command",
      "mcp__serena__activate_project",
      "mcp__serena__switch_modes",
      "mcp__serena__check_onboarding_performed",
      "mcp__serena__onboarding",
      "mcp__serena__think_about_collected_information",
      "mcp__serena__think_about_task_adherence",
      "mcp__serena__think_about_whether_you_are_done",
      "mcp__serena__prepare_for_new_conversation",
      "mcp__sequential-thinking__sequentialthinking",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_resize",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_handle_dialog",
      "mcp__playwright__browser_evaluate",
      "mcp__playwright__browser_file_upload",
      "mcp__playwright__browser_fill_form",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_press_key",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_navigate_back",
      "mcp__playwright__browser_network_requests",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_snapshot",
      "mcp__playwright__browser_click",
      "mcp__playwright__browser_drag",
      "mcp__playwright__browser_hover",
      "mcp__playwright__browser_select_option",
      "mcp__playwright__browser_tabs",
      "mcp__playwright__browser_wait_for",
      "mcp__time__get_current_time",
      "mcp__time__convert_time",
      "mcp__marksman__get_document_outline",
      "mcp__marksman__find_wiki_links",
      "mcp__marksman__find_embedded_content",
      "mcp__marksman__find_block_references",
      "mcp__marksman__find_callouts",
      "mcp__marksman__parse_obsidian_links",
      "mcp__marksman__extract_dataview_fields",
      "mcp__marksman__build_vault_graph",
      "mcp__marksman__find_cross_references",
      "mcp__marksman__extract_frontmatter",
      "mcp__marksman__find_code_blocks",
      "mcp__marksman__find_task_lists",
      "mcp__marksman__analyze_document_structure",
      "mcp__marksman__lint_document",
      "mcp__marksman__auto_fix_document",
      "mcp__marksman__health_check"
    ],
    "deny": [
      "Read(./.env)",
      "Read(./.env.*)",
      "Read(./secrets/**)"
    ]
  },
  "model": "opusplan",
  "enableAllProjectMcpServers": false,
  "hooks": {
    "SessionStart": [
      {
        "matcher": "startup",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/global-date-context.sh"
          }
        ]
      },
      {
        "matcher": "resume",
        "hooks": [
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/global-date-context.sh"
          }
        ]
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "",
        "hooks": [
          {
            "type": "command",
            "command": "echo \"\nThink hard.\n\""
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/you_are_not_right.sh"
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/smart-vtree-append.sh"
          },
          {
            "type": "command",
            "command": "$HOME/.claude/hooks/claude_self_improve.sh"
          }
        ]
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Edit",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$TOOL_PARAMS\" =~ \\.md$ ]] || [[ \"$TOOL_PARAMS\" =~ \\.mdx$ ]] || [[ \"$TOOL_PARAMS\" =~ \\.markdown$ ]]; then $HOME/.claude/hooks/post-edit-markdown.sh . check; fi",
            "timeout": 10
          }
        ]
      },
      {
        "matcher": "MultiEdit",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$TOOL_PARAMS\" =~ \\.md ]] || [[ \"$TOOL_PARAMS\" =~ \\.mdx ]] || [[ \"$TOOL_PARAMS\" =~ \\.markdown ]]; then $HOME/.claude/hooks/post-edit-markdown.sh . check; fi",
            "timeout": 10
          }
        ]
      },
      {
        "matcher": "Write",
        "hooks": [
          {
            "type": "command",
            "command": "if [[ \"$TOOL_PARAMS\" =~ \\.md$ ]] || [[ \"$TOOL_PARAMS\" =~ \\.mdx$ ]] || [[ \"$TOOL_PARAMS\" =~ \\.markdown$ ]]; then $HOME/.claude/hooks/post-edit-markdown.sh . check; fi",
            "timeout": 10
          }
        ]
      }
    ]
  },
  "statusLine": {
    "type": "command",
    "command": "input=$(cat); current_dir=\"$(echo \"$input\" | jq -r '.workspace.current_dir')\"; model_name=\"$(echo \"$input\" | jq -r '.model.display_name')\"; claude_version=\"$(claude --version 2>/dev/null | cut -d' ' -f1 || echo 'N/A')\"; output_style=\"$(echo \"$input\" | jq -r '.output_style.name // \"default\"' | sed 's/default/std/')\"; short_dir=\"$(echo \"$current_dir\" | sed \"s|^$HOME|~|\")\"; if git -C \"$current_dir\" rev-parse --git-dir > /dev/null 2>&1; then branch=\"$(git -C \"$current_dir\" branch --show-current 2>/dev/null || git -C \"$current_dir\" rev-parse --short HEAD 2>/dev/null)\"; if git -C \"$current_dir\" diff --quiet && git -C \"$current_dir\" diff --cached --quiet; then git_status=\"($branch)\"; else git_status=\"($branch âœ—)\"; fi; if [ -n \"$ANTHROPIC_BASE_URL\" ]; then printf \"\\033[2m\\033[1;32m$(whoami)@$(hostname -s)\\033[0m\\033[2m:\\033[1;34m%s\\033[0m \\033[1;33m%s\\033[0m \\033[2m[%s]\\033[0m \\033[2m[claude %s]\\033[0m \\033[2m[%s]\\033[0m \\033[2m[%s]\\033[0m\" \"$short_dir\" \"$git_status\" \"$model_name\" \"$claude_version\" \"$output_style\" \"$ANTHROPIC_BASE_URL\"; else printf \"\\033[2m\\033[1;32m$(whoami)@$(hostname -s)\\033[0m\\033[2m:\\033[1;34m%s\\033[0m \\033[1;33m%s\\033[0m \\033[2m[%s]\\033[0m \\033[2m[claude %s]\\033[0m \\033[2m[%s]\\033[0m\" \"$short_dir\" \"$git_status\" \"$model_name\" \"$claude_version\" \"$output_style\"; fi; else if [ -n \"$ANTHROPIC_BASE_URL\" ]; then printf \"\\033[2m\\033[1;32m$(whoami)@$(hostname -s)\\033[0m\\033[2m:\\033[1;34m%s\\033[0m \\033[2m[%s]\\033[0m \\033[2m[claude %s]\\033[0m \\033[2m[%s]\\033[0m \\033[2m[%s]\\033[0m\" \"$short_dir\" \"$model_name\" \"$claude_version\" \"$output_style\" \"$ANTHROPIC_BASE_URL\"; else printf \"\\033[2m\\033[1;32m$(whoami)@$(hostname -s)\\033[0m\\033[2m:\\033[1;34m%s\\033[0m \\033[2m[%s]\\033[0m \\033[2m[claude %s]\\033[0m \\033[2m[%s]\\033[0m\" \"$short_dir\" \"$model_name\" \"$claude_version\" \"$output_style\"; fi; fi"
  }
}
