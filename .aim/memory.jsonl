{"type":"_aim","source":"mcp-knowledge-graph"}
{"type":"entity","name":"Stow_Configuration","entityType":"system","observations":["GNU Stow manages package symlinks to home directory","Each top-level directory is a stow package","Profile-based installation system in profiles/ directory","Global .aim now managed as 'aim' package via stow"]}
{"type":"entity","name":"Memory_Architecture","entityType":"configuration","observations":["Dual memory system: global (~/.aim) + project-specific (./.aim)","Global memory via stow symlink for cross-project persistence","Project memory for dotfiles-specific development context","Automatic detection prioritizes project over global","Role-based global databases created: trader, engineer, business-owner, life-architect","Each role has dedicated context for specialized knowledge tracking","Global databases use location: 'global' override to store in ~/.aim/","Enables context-specific memory across different life roles and responsibilities","File structure: memory-trader.jsonl, memory-engineer.jsonl, memory-business-owner.jsonl, memory-life-architect.jsonl"]}
{"type":"entity","name":"Dotfiles_Project","entityType":"project","observations":["Personal dotfiles repository for macOS and Ubuntu Linux","Uses GNU Stow for symlink management","Multi-level Claude Code configuration system","Integrated Task Master AI for project management","Comprehensive testing via ShellSpec and Docker","Security-focused with GPG encryption and secret management","Aim package configured for GNU Stow management","~/.aim directory now managed via stow symlink","Memory persistence integrated with dotfiles repository","Original ~/.aim backed up to ~/.aim-backup-20250906-122535"]}
{"type":"entity","name":"Stow_Package_Architecture","entityType":"architecture","observations":["Each top-level directory = stow package","Profile system in profiles/ controls installation","Dependencies: git → zsh → vim (installation order)","claude/ package provides global Claude Code configuration","Symlinks created from package/* to home directory","Stow manages conflicts and provides rollback capability"]}
{"type":"entity","name":"Package_Dependencies","entityType":"system","observations":["zsh depends on git for branch info in prompt","vim requires git for fugitive plugin","claude-project depends on claude base configuration","pass-store integrates with git for sync","chrome-automation requires system LaunchDaemon setup","ccstatusline integrates with Claude Code status display"]}
{"type":"entity","name":"Installation_Profiles","entityType":"configuration","observations":["minimal: git, zsh, vim basics for essential functionality","development: adds claude, scripts, testing tools","full: complete setup including Task Master and all tools","work: development + pass-store + chrome-automation","Profile files in profiles/ directory control package selection","Later profiles can override earlier ones in cascade"]}
{"type":"entity","name":"Platform_Specifics","entityType":"configuration","observations":["macOS: Uses Homebrew, LaunchDaemon for services","Ubuntu: apt packages, systemd services","Common: GNU Stow works identically on both platforms","Conditional logic in install.sh handles differences","macOS path differences: /opt/homebrew vs /usr/local","Platform detection via uname in installation scripts"]}
{"type":"entity","name":"Build_System","entityType":"process","observations":["Makefile provides standardized commands across platforms","make bootstrap: Complete setup for new machines","make install: Install development profile","make test: Run comprehensive test suite via ShellSpec","make backup/restore: Timestamped configuration backups","make doctor: Health check for installation issues"]}
{"type":"entity","name":"Testing_Infrastructure","entityType":"quality","observations":["ShellSpec framework for shell script testing","Docker-based E2E testing environments","GitHub Actions CI/CD pipeline","Test fixtures and helpers in tests/ directory","make test-quick for validation, test-e2e for full Docker tests","Coverage reporting and test result visualization"]}
{"type":"entity","name":"Claude_Code_Integration","entityType":"integration","observations":["Multi-level hierarchy: global ~/.claude → user claude-user/ → project claude-project/","MCP servers configured in .mcp.json per project","CLAUDE.md files provide context at each level","Status line integration via ccstatusline package","Hierarchical configuration allows project-specific overrides","SuperClaude framework components in ~/.claude/ for advanced workflows"]}
{"type":"entity","name":"MCP_Server_Configuration","entityType":"toolset","observations":["Context7: Library documentation lookup and framework patterns","Serena: Project memory and semantic code understanding","Memory: Knowledge graph persistence and session context","Task Master: AI project management and task automation","Sequential Thinking: Multi-step reasoning for complex analysis","Server configurations in .mcp.json with environment variables"]}
{"type":"entity","name":"Memory_System_Integration","entityType":"architecture","observations":["Dual memory system: global (~/.aim) + project-specific (./.aim)","Global memory via stow symlink for cross-project persistence","Project memory for repository-specific development context","Role-based databases for life context separation (trader, engineer, business-owner, life-architect)","Automatic detection prioritizes project over global memory","Memory configurations tracked in git for version control"]}
{"type":"entity","name":"Security_Architecture","entityType":"security","observations":["GPG keys managed via scripts/gpg-manager.sh","Password store synced via pass-store/ package","API keys encrypted with pass, never stored in plaintext","Pre-commit hooks prevent secret commits via git/hooks/","SSH keys require chmod 600 permissions after stow","Audit commands: make check-secrets and make audit"]}
{"type":"entity","name":"Backup_Strategy","entityType":"process","observations":["make backup creates timestamped ~/.dotfiles-backups/","Excludes secrets by default (backup-restore.sh)","Includes Homebrew package lists for restoration","Git history provides version control backup","Original ~/.aim backed up during stow setup","Restore capability via make restore command"]}
{"type":"entity","name":"Common_Issues","entityType":"troubleshooting","observations":["Stow conflicts: Remove existing dotfiles first with manual cleanup","macOS Homebrew path issues: Check /opt/homebrew vs /usr/local paths","SSH key permissions: chmod 600 required after stow operations","Zsh compinit warnings: run compaudit to diagnose permission issues","Memory leak in WebSocket connections after 24h uptime","Test failures often indicate missing dependencies or path issues"]}
{"type":"entity","name":"Performance_Benchmarks","entityType":"metrics","observations":["Full installation time: ~15 minutes on fresh macOS","Stow operations: <1 second per package","Test suite execution: 3-5 minutes for complete validation","Docker E2E tests: 8-12 minutes with full environment setup","Memory usage: <50MB for all background services","Startup time impact: <200ms additional shell initialization"]}
{"type":"relation","from":"Dotfiles_Project","to":"Memory_Architecture","relationType":"implements"}
{"type":"relation","from":"Stow_Package_Architecture","to":"Package_Dependencies","relationType":"defines"}
{"type":"relation","from":"Installation_Profiles","to":"Stow_Package_Architecture","relationType":"controls"}
{"type":"relation","from":"Platform_Specifics","to":"Build_System","relationType":"influences"}
{"type":"relation","from":"Build_System","to":"Testing_Infrastructure","relationType":"integrates_with"}
{"type":"relation","from":"Claude_Code_Integration","to":"MCP_Server_Configuration","relationType":"utilizes"}
{"type":"relation","from":"Memory_System_Integration","to":"Stow_Package_Architecture","relationType":"extends"}
{"type":"relation","from":"Security_Architecture","to":"Package_Dependencies","relationType":"secures"}
{"type":"relation","from":"Backup_Strategy","to":"Security_Architecture","relationType":"protects"}
{"type":"relation","from":"Common_Issues","to":"Platform_Specifics","relationType":"references"}
{"type":"relation","from":"Performance_Benchmarks","to":"Build_System","relationType":"measures"}
{"type":"relation","from":"Testing_Infrastructure","to":"Common_Issues","relationType":"validates"}
{"type":"relation","from":"Memory_System_Integration","to":"Claude_Code_Integration","relationType":"supports"}